diff -ruN linux_old/arch/x86/syscalls/syscall_64.tbl linux_new/arch/x86/syscalls/syscall_64.tbl
--- linux_old/arch/x86/syscalls/syscall_64.tbl	2014-01-20 08:10:07.000000000 +0530
+++ linux_new/arch/x86/syscalls/syscall_64.tbl	2018-02-15 22:43:57.114053047 +0530
@@ -320,7 +320,7 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
-
+314	common	sh_task_info		sys_sh_task_info
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff -ruN linux_old/include/linux/syscalls.h linux_new/include/linux/syscalls.h
--- linux_old/include/linux/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ linux_new/include/linux/syscalls.h	2018-02-15 22:45:00.578053047 +0530
@@ -847,4 +847,5 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_sh_task_info(long pi,char* fil);
 #endif
diff -ruN linux_old/Makefile linux_new/Makefile
--- linux_old/Makefile	2014-01-20 08:10:07.000000000 +0530
+++ linux_new/Makefile	2018-02-15 22:42:16.210053047 +0530
@@ -754,7 +754,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux_old/sh_task_info/Makefile linux_new/sh_task_info/Makefile
--- linux_old/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux_new/sh_task_info/Makefile	2018-02-15 22:39:40.162053047 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
diff -ruN linux_old/sh_task_info/sh_task_info.c linux_new/sh_task_info/sh_task_info.c
--- linux_old/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux_new/sh_task_info/sh_task_info.c	2018-02-15 22:39:40.126053047 +0530
@@ -0,0 +1,67 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/sched.h>
+#include <linux/fcntl.h>
+#include <asm/uaccess.h>
+#include <linux/module.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+
+
+static int save_info(char* d, char* f)
+{
+	int fk=0;
+	struct file *file;
+	loff_t index=0;
+	mm_segment_t old = get_fs();
+	set_fs(KERNEL_DS);
+
+	fk=sys_open(f,O_WRONLY,0644);
+
+	if(fk<0)
+	{
+		return -ENOENT;
+	}
+	else if(fk>=0)
+	{
+		sys_write(fk,d,strlen(d));
+		file=fget(fk);
+		if(!file)
+		{
+			return -ENOENT;
+		}
+		else
+		{
+			vfs_write(file,d,strlen(d),&index);
+			fput(file);
+		}
+		sys_close(fk);
+	}
+	set_fs(old);
+	return 0;
+}
+
+asmlinkage long sys_sh_task_info(long pi,char* fil)
+{
+	struct task_struct *task;
+	char info[1000];
+	char* p;
+	int n=0;
+	int er=0;
+	for_each_process(task)
+	{
+		if(pi==(long)task->pid)
+		{
+			n=sprintf(info,"Process name: %s\nProcess PID: %ld\nProcess Priority: %ld\nProcess Normal Priority: %ld\nProcess Static Priority: %ld\nProces RT_Priority: %ld\nProcess State: %ld\nProcess CPU: %ld\nProcess TGID: %ld\nSched Entity on_rq: %ld\nProcess Vruntime: %ld\nProcess exec_start: %ld\nProcess sum_exec_runtime: %ld\nthread_struct sp and sp0: %lu   %lu\nsigset_t blocked and real_blocked: %lu  %lu\n",task->comm,(long)task->pid,(long)task->prio,(long)task->static_prio,(long)task->normal_prio,(long)task->rt_priority,(long)task->state,(long)task->on_cpu,(long)task->tgid,(long)task->se.on_rq,(long)task->se.vruntime,(long)task->se.exec_start,(long)task->se.sum_exec_runtime,(unsigned long)task->thread.sp,(unsigned long)task->thread.sp0,(unsigned long)task->blocked.sig[0],(unsigned long)task->real_blocked.sig[0]);
+			printk(info);
+
+			p=info;
+			er=save_info(info,fil);
+		}
+	}
+	if(n==0)
+	{
+		return -ESRCH;
+	}
+	return er;
+}
